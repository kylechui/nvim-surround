================================================================================
                                                               *nvim-surround*

|nvim-surround| is a plugin for modifying "surroundings" in Neovim, allowing you
to efficiently:
* Add/change/delete surrounding delimiter pairs
* Dot-repeat previous surround actions
* Manipulate HTML-style tags
* Alias delimiter types to other characters

                                                       *nvim-surround.setup()*
nvim-surround.setup({opts})
    Setup function to be run by the user, which configures the default
    keymaps and delimiter types.

    Note: Calling the setup function with no arguments or an empty table uses
    the defaults.

    Note: To disable any unwanted feature, set the corresponding value in the
    setup table to false.

    Usage:
>
    require("nvim-surround").setup({
        keymaps = {
            -- Overwrite keymaps here
        },
        delimiters = {
            -- Customize builtin delimiter types here
        },
        highlight_motion = {
            -- Customize highlight properties here
        },
    })
<


    Valid keys for {opts}

                                                       *nvim-surround.keymaps*
    keymaps:~
        Defines what keymaps are used to interact with the plugin.

        Default: {
            insert = "ys",
            visual = "S",
            delete = "ds",
            change = "cs",
        }

                                                    *nvim-surround.delimiters*
    delimiters:~
        A table of various types of delimiters that are available to the user.

    Types of {opts.delimiters}

                                              *nvim-surround.delimiters.pairs*
        pairs:~
            A table that associates characters with a pair of distinct
            delimiters, used for inserting/changing/deleting.

            More powerful pairs can be created using an anonymous function
            that returns a table of two delimiters. This can be used to query
            the user for input and use the input to create the pair, or to tap
            into any other Lua functions.

            In the default configuration, the `i` mapping queries the user for
            both left and right delimiters, while the `f` mapping surrounds
            the selection with parentheses and prepends a user-given function
            name.

            Default: {
                ["("] = { "( ", " )" },
                [")"] = { "(", ")" },
                ["{"] = { "{ ", " }" },
                ["}"] = { "{", "}" },
                ["<"] = { "< ", " >" },
                [">"] = { "<", ">" },
                ["["] = { "[ ", " ]" },
                ["]"] = { "[", "]" },
                ["i"] = function()
                    return {
                        utils.get_input(
                            "Enter the left delimiter: "
                        ),
                        utils.get_input(
                            "Enter the right delimiter: "
                        )
                    }
                end,
                ["f"] = function()
                    return {
                        utils.get_input(
                            "Enter the function name: "
                        ) .. "(",
                        ")"
                    }
                end,
            }

                                         *nvim-surround.delimiters.separators*
        separators:~
            A table that associates characters with a pair of non-distinct
            delimiters, used for inserting/changing/deleting.

            Default: {
                ["'"] = { "'", "'" },
                ['"'] = { '"', '"' },
                ["`"] = { "`", "`" },
            }

                                               *nvim-surround.delimiters.HTML*
        HTML:~
            A table of characters used to trigger HTML-style mappings, each
            associated to a true value.

            Default: {
                ["t"] = true,
            }

                                            *nvim-surround.delimiters.aliases*
        aliases:~
            A table that aliases characters {alias} to output characters. If
            the associated value is a character {char}, then you may use {alias}
            to stand in for {char} while changing/deleting surrounding
            delimiter pairs.

            Note: Only Neovim builtin text-objects may be inserted in this
            manner.

            For example, `ysibB` has the same effect as typing `ysi)},` but
            `ysarb` is invalid. However, `csar` behaves the same as `cs>]`.

            If the associated value to {alias} is a table {chars}, then when
            changing/deleting surrounding delimiter pairs, {alias} will
            instead find the nearest surrounding pair of all text-objects in
            {chars}, and modify that pair.

            Note: These kinds of aliases cannot be used for inserting
            surrounding pairs.

            For example: `dsq` at position 1 will delete the double quotes,
            while `dsq` at position 2 will delete the single quotes instead.
>
            Cursor:                      2             1
            Buffer: vim.fn.execute("echo 'Hello world!'")
<
            Default: {
                ["a"] = ">",
                ["b"] = ")",
                ["B"] = "}",
                ["r"] = "]",
                ["q"] = { '"', "'", "`" },
                ["s"] = { ")", "]", "}", ">", "'", '"', "`" },
            }

                                              *nvim-surround.highlight_motion*
    When inserting a surrounding pair around a text-object selection, one may
    optionally highlight the selection. The highlighting is done using the
    group "NvimSurroundHighlightTextObject", which can be configured
    separately.

    duration:~
        A positive value that represents how long to highlight the given
        text-object selection (in milliseconds).

        Note: A value of 0 means that the highlight has no timeout, persisting
        until either the action is canceled or completed.

        Default: 0

                                                *nvim-surround.buffer_setup()*
nvim-surround.buffer_setup({opts})
    Sets up user configuration options for the current buffer. It allows users
    to have different mappings per buffer (importantly, file type).

    One example is to set up different `f` mappings for Python and Lua file
    types via:
>
    -- ftplugin/python.lua
    require("nvim-surround").buffer_setup({
        delimiters = {
            pairs = {
                ["f"] = function()
                    return {
                        "def " .. require("nvim-surround.utils").get_input(
                            "Enter the function name: "
                        ) .. "(",
                        "):"
                    }
                end,
            }
        }
    })
    -- ftplugin/lua.lua
    require("nvim-surround").buffer_setup({
        delimiters = {
            pairs = {
                ["f"] = function()
                    return {
                        "function " .. require("nvim-surround.utils").get_input(
                            "Enter the function name: "
                        ) .. "(",
                        ")"
                    }
                end,
            }
        }
    })
<
vim:tw=78:ts=8:ft=help:norl:
