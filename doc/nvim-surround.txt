================================================================================
                                                               *nvim-surround*

|nvim-surround| is a plugin for modifying "surroundings" in Neovim, allowing you
to efficiently:
* Add/change/delete surrounding delimiter pairs
  * Add complex pairs depending on user-input and other functions
* Dot-repeat previous surround actions
* Configure buffer-local mappings and customizations
* Manipulate HTML-style tags
* Alias characters to represent other delimiter types

                                                       *nvim-surround.setup()*
nvim-surround.setup({opts})
    Setup function to be run by the user, which configures default keymaps and
    delimiter types across all buffers.

    Note: Calling the setup function with no arguments or an empty table uses
    the defaults.

    Note: To disable any unwanted feature, set the corresponding value in the
    setup table to false.

    Usage:
>
    require("nvim-surround").setup({
        keymaps = {
            -- Overwrite keymaps here
        },
        delimiters = {
            -- Customize builtin delimiter types here
        },
        highlight_motion = {
            -- Customize highlight properties here
        },
    })
<


    Valid keys for {opts}

                                                       *nvim-surround.keymaps*
    keymaps:~
        Defines what keymaps are used to interact with the plugin. The
        {insert_line} key is used to surround the current line (not including
        leading nor trailing whitespace), and can be thought of as a special
        case of {insert}.

        Default: {
            insert = "ys",
            insert_line = "yss",
            visual = "S",
            delete = "ds",
            change = "cs",
        }

                                                    *nvim-surround.delimiters*
    delimiters:~
        A table of various types of delimiters that are available to the user.

    Types of {opts.delimiters}

                                              *nvim-surround.delimiters.pairs*
        pairs:~
            A table that associates characters with a pair of distinct
            delimiters, used for inserting/changing/deleting. Each delimiter
            can either be a simple string, or a table containing strings,
            where each element of the table will be put on its own line.

            More powerful pairs can be created using an anonymous function
            that returns a table of two delimiters. This can be used to query
            the user for input and use the input to create the pair, or to tap
            into any other Lua functions. This function can also optionally
            take a parameter {args}, which is a table containing the following
            keys:

        Valid keys for {args}

            bufnr:~
                The buffer number where the surround is called.
            selection:~
                A table containing {first_pos} and {last_pos}, which contain
                the row, column pair for the beginning and end of the
                selection.
            text:~
                A table of strings containing the contents of the selection,
                with one string per line of the buffer.

            In the default configuration, the `i` mapping queries the user for
            both left and right delimiters, while the `f` mapping surrounds
            the selection with parentheses and prepends a user-given function
            name.

            Default: {
                ["("] = { "( ", " )" },
                [")"] = { "(", ")" },
                ["{"] = { "{ ", " }" },
                ["}"] = { "{", "}" },
                ["<"] = { "< ", " >" },
                [">"] = { "<", ">" },
                ["["] = { "[ ", " ]" },
                ["]"] = { "[", "]" },
                ["i"] = function()
                    return {
                        utils.get_input(
                            "Enter the left delimiter: "
                        ),
                        utils.get_input(
                            "Enter the right delimiter: "
                        )
                    }
                end,
                ["f"] = function()
                    return {
                        utils.get_input(
                            "Enter the function name: "
                        ) .. "(",
                        ")"
                    }
                end,
            }

                                         *nvim-surround.delimiters.separators*
        separators:~
            A table that associates characters with a pair of non-distinct
            delimiters, used for inserting/changing/deleting.

            Default: {
                ["'"] = { "'", "'" },
                ['"'] = { '"', '"' },
                ["`"] = { "`", "`" },
            }

                                               *nvim-surround.delimiters.HTML*
        HTML:~
            A table of characters used to trigger HTML-style mappings. The
            value of each mapping determines whether the character is used to
            change just the type of the tag, or the whole tag contents.

            Default: {
                ["t"] = "type",
                ["T"] = "whole",
            }

                                            *nvim-surround.delimiters.aliases*
        aliases:~
            A table that aliases some characters to other values:
            * If the value is a single character, then the characters are
              interchangeable.
            * If the value is a table, then the alias may stand in for any of
              the characters in the table when changing/deleting.

            For example, `dsq` deletes the "closest" pair between `ds'`,
            `ds"`, and `ds``. When typed at position 1, the double quotes `"`
            get deleted, and when typed at position 2, the single quotes `'`
            get deleted.
>
            Cursor:                      2             1
            Buffer: vim.fn.execute("echo 'Hello world!'")
<
            For more information on what constitutes as "closest", see
            |nvim-surround.jump|.

            Note: Only builtin text-objects may be insert surrounded, but this
            can be circumvented by defining the following operator-mode maps:
>
            vim.keymap.set("o", "ir", "i[")
            vim.keymap.set("o", "ar", "a[")
            vim.keymap.set("o", "ia", "i<")
            vim.keymap.set("o", "aa", "a<")
<
            Default: {
                ["a"] = ">",
                ["b"] = ")",
                ["B"] = "}",
                ["r"] = "]",
                ["q"] = { '"', "'", "`" },
                ["s"] = { ")", "]", "}", ">", "'", '"', "`" },
            }

                                              *nvim-surround.highlight_motion*
    When inserting/changing a surrounding pair, one may optionally highlight
    the selection(s) of interest. During insertion, the selection around which
    the pair will be added is highlighted. During changing, the surrounding
    pair to be replaced is highlighted.

    The relevant highlight group is "NvimSurroundHighlightTextObject", which
    can be configured separately.

    Default: `highlight default link NvimSurroundHighlightTextObject Visual`

    duration:~
        A positive value that represents how long to highlight the
        selection(s) before clearing (in milliseconds).

        Note: A value of 0 means that the highlight has no timeout, persisting
        until either the action is canceled or completed.

        Default: 0

                                                *nvim-surround.buffer_setup()*
nvim-surround.buffer_setup({opts})
    Sets up user configuration options for the current buffer. It allows users
    to have different mappings per buffer (notably, file type).

    One example is to set up different `f` mappings for Python and Lua file
    types via:
>
    -- ftplugin/python.lua
    require("nvim-surround").buffer_setup({
        delimiters = {
            pairs = {
                ["f"] = function()
                    return {
                        "def " .. require("nvim-surround.utils").get_input(
                            "Enter the function name: "
                        ) .. "(",
                        "):"
                    }
                end,
            }
        }
    })
    -- ftplugin/lua.lua
    require("nvim-surround").buffer_setup({
        delimiters = {
            pairs = {
                ["f"] = function()
                    return {
                        "function " .. require("nvim-surround.utils").get_input(
                            "Enter the function name: "
                        ) .. "(",
                        ")"
                    }
                end,
            }
        }
    })
<
                                                      *nvim-surround.behavior*
                                                          *nvim-surround.jump*

Under certain circumstances, |nvim-surround| can "jump" to the "nearest"
delimiter. It always prefers
* pairs that surround the cursor, before
* pairs that occur after the cursor, before
* pairs that occur before the cursor

Note: Reverse jumping is only available for changing/deleting surrounds, not
inserting a new pair.

An example of this behavior is as follows:
>
    local nil_value = function()
        vim.ui.input({
            prompt = "Enter some text: ",
        }, function(input)
        end)
    end
<
When the cursor is put on top of the `v` in `vim`, and `ds(..` is typed:
* The parentheses for the `vim.ui.input` call get deleted first
* The parentheses around the word `input` get deleted next
* The parentheses on the first line get deleted last

Note: |nvim-surround| only jumps to separators (quotes by default) on the same
line as the cursor

Here's another example for quotes:
>
    Buffer: local str = "This 'string' contains `some` quotes" -- comment
    Cursor:       1      2    3   4     5       6    7     8       9
<
In the above example, typing `dsq` at locations:
* 1, 2, 5, 8, 9: Deletes the double quotes `"`
* 3, 4: Deletes the single quotes `'`
* 6, 7: Deletes the backticks ```

vim:tw=78:ts=8:ft=help:norl:
