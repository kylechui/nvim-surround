*nvim-surround.txt* A plugin for adding/deleting/changing delimiter pairs.

Author: Kyle Chui <https://www.github.com/kylechui>
License: MIT License

================================================================================
CONTENTS                                              *nvim-surround.contents*

    1. Introduction ......................................... |nvim-surround|
    2. Usage .......................................... |nvim-surround.usage|
        2.1. Adding delimiter pairs ..................... |nvim-surround.add|
        2.2. Deleting delimiter pairs ................ |nvim-surround.delete|
        2.3. Changing delimiter pairs ................ |nvim-surround.change|
        2.4. More mappings .................... |nvim-surround.more_mappings|
        2.5. Default pairs .................... |nvim-surround.default_pairs|
        2.6. Aliasing .............................. |nvim-surround.aliasing|
        2.7. Jumps .................................... |nvim-surround.jumps|
    3. Configuration .......................... |nvim-surround.configuration|
        3.1. keymaps ................................ |nvim-surround.keymaps|
        3.2. delimiters .......................... |nvim-surround.delimiters|
        3.3. aliases ................................ |nvim-surround.aliases|
        3.4. highlight_motion .............. |nvim-surround.highlight_motion|
        3.5. move_cursor ........................ |nvim-surround.move_cursor|

================================================================================
1. Introduction                                   *nvim-surround.introduction*

|nvim-surround| is a plugin for efficiently manipulating left/right pairs of
text called "surroundings", e.g. parentheses, quotes, HTML tags, and more.
This plugin provides keymaps for "adding" (through insert/normal/visual mode)
and "modifying" (deleting/changing) surrounding pairs.

================================================================================
2. Usage                                                 *nvim-surround.usage*

|nvim-surround| has three main operations:

* Adding a surrounding pair to the buffer
* Deleting a surrounding pair from the buffer
* Changing a surrounding pair to a different pair

--------------------------------------------------------------------------------
2.1. Adding delimiter pairs                                *nvim-surround.add*

The primary way of adding a new pair to the buffer is via the normal-mode *ys*
operator, which stands for "you surround". It can be used via
`ys{motion}{char}`, which surrounds a given {motion} with a delimiter pair
associated with {char}. For example, `ysa")` means "you surround around quotes
with parentheses".

In all of the following examples, the `*` denotes the cursor position:

    Old text                    Command         New text ~
    local str = H*ello          ysiw"           local str = "Hello"
    require"nvim-surroun*d"     ysa")           require("nvim-surround")
    char c = *x;                ysl'            char c = 'x';
    int a[] = *32;              yst;}           int a[] = {32};

Furthermore, there are insert-mode *<C-g>s* and visual-mode *S* mappings, that
add the delimiter pair around the cursor and visual selection, respectively.
In all of the following examples, we will use `|` to demarcate the start and
end of a visual selection:

    Old text                    Command         New text ~
    local str = *               <C-g>s"         local str = "*"
    local tab = *               <C-g>s}         local str = {*}
    local str = |some text|     S'              local str = 'some text'
    |div id="test"|</div>       S>              <div id="test"></div>

--------------------------------------------------------------------------------
2.2. Deleting delimiter pairs                           *nvim-surround.delete*

To delete a delimiter pair, use the *ds* operator, which stands for "delete
surround". It is used via `ds[char]`, deleting the surrounding pair associated
with {char}. For example, `ds)` means "delete surrounding parentheses".

    Old text                    Command         New text ~
    local x = ({ *32 })         ds)             local x = { 32 }
    See ':h h*elp'              ds'             See :h help
    local str = [[Hell*o]]      ds]             local str = [Hello]

--------------------------------------------------------------------------------
2.3. Changing delimiter pairs                           *nvim-surround.change*

To change a delimiter pair, use the *cs* operator, which stands for "change
surround". It is used via `cs{target}{replacement}`, changing the surrounding
pair associated with {target} to a pair associated with {replacement}. For
example, `cs'"` means "change the surrounding single quotes to double quotes".

    Old text                    Command         New text ~
    '*some string'              cs'"            "some string"
    use<*"hello">               cs>)            use("hello")
    `some text*`                cs`}            {some text}

--------------------------------------------------------------------------------
2.4. More mappings                               *nvim-surround.more_mappings*

For each of the additive mappings, there are a few variants:

The *yss* operator is a special case for |ys|, and operates on the current
line via `yss[char]`, ignoring leading and trailing whitespace. The *yS* and
*ySS* operators are analogous to |ys| and |yss|, but add the delimiter pair on
new lines.

The *<C-g>S* insert-mode operator is analogous to |<C-g>s|, but adds the
delimiter pair on new lines.

If the cursor is in |charwise-visual| mode, there is an extra mapping *gS* for
adding the delimiters on new lines. For other visual-mode mappings, the type
of visual mode determines how the surround behaves. If you are in
|linewise-visual| mode, then the delimiter pair is added to the buffer on new
lines. If you are in |blockwise-visual| mode, then the delimiter pair is added
around the visual block, once per line.

--------------------------------------------------------------------------------
2.5. Default pairs                               *nvim-surround.default_pairs*

We've looked at a few of the built-in surround actions, but here we'll go a
bit more in-depth. For all open/close pairs, e.g. `()`, adding a surround
using the closing character will surround the selection with just the pair
itself, whereas using the opening character will add a whitespace gap between
the selection and delimiter pair.

    Old text                    Command         New text ~
    *sample_text                ysiw}           {sample_text}
    *sample_text                ysiw{           { sample_text }

This applies for `()`, `{}`, `[]`, and `<>` pairs. When deleting or changing
open/close pairs, the closing character always leaves whitespace intact, while
the opening character will try to remove a whitespace character (if it
exists).

    Old text                    Command         New text ~
    {( sa*mple_text )}          ds(             {sample_text}
    {(sa*mple_text)}            ds(             {sample_text}
    {(sa*mple_text )}           ds(             {sample_text}
    {( sa*mple_text )}          ds)             { sample_text }

Note: Deleting with the opening character is possible when there is only
whitespace on one side, or even when it is missing altogether.

Changing surrounding pairs exhibits similar behaviors.

    Old text                    Command         New text ~
    (sa*mple_text)              cs)}            {sample_text}
    (sa*mple_text)              cs(}            {sample_text}
    (sa*mple_text)              cs((            ( sample_text )
    (sa*mple_text)              cs(]            [sample_text]

There are also a handful of built-in delimiter pairs that are more complex.
First up we have HTML tags, which use the key `t` or `T`. The user is then
queried for the tag type/attributes, after which they hit <CR> to create the
surrounding pair.

    Old text                    Command         New text ~
    div cont*ents               ysstdiv         <div>div contents</div>
    h1 *contents                yssth1 id="x"   <h1 id="x">h1 contents</h1>
    <div>d*iv contents</div>    dst             div contents
    <h1 id="head">t*ext</h1>    cstdiv          <div id="head">text</div>
    <h1 id="head">text*</h1>    csTdiv          <div>text</div>

The keys `t` and `T` are identical, except for the fact that `cst` will only
change the surrouding tag's type (leaving the attributes alone), while `csT`
will change the entirety of the surrounding tag's contents.

Note: When changing surrounding tags via `cst` or `csT`, a second replacement
character is unnecessary. This is explained later in [TODO: link to
change.replacement]

Next are function calls, denoted by the key `f`. By default, they match a Lua
pattern consisting of some non-whitespace characters, followed by a balanced
pair of parentheses.

    Old text                    Command         New text ~
    arg*s                       ysiwffunc       func(args)
    f*unc_name(a, b, x)         dsf             a, b, x
    f*unc_name(a, b, x)         csfnew_name     new_name(a, b, x)

Note: Just like with HTML tags, a replacement character is unnecessary when
changing (via `csf`).

TODO: Document usage for `i` key

--------------------------------------------------------------------------------
2.6. Aliasing                                         *nvim-surround.aliasing*

In |nvim-surround|, one can alias a character to "stand in for" one or more
other characters. If the alias is just a single character, then they can be
used interchangeably anywhere. For example, the default configuration aliases
`b` to represent `)` and `r` to represent `]`.

    Old text                    Command         New text ~
    sample* text                yssb            (sample text)
    [more stuff]                dsr             more stuff
    use["nvim*-surround"]       csrb            use("nvim-surround")

Note: While `ysabB` is a valid surround action, `ysarB` is not, since `ar` is
not a valid Vim motion. This can be side-stepped by creating the following
operator-mode maps:
>
    vim.keymap.set("o", "ir", "i[")
    vim.keymap.set("o", "ar", "a[")
    vim.keymap.set("o", "ia", "i<")
    vim.keymap.set("o", "aa", "a<")
<

The other type of alias is a "tabular alias", where each alias character
represents some set of characters. Tabular aliases are only used when
modifying existing delimiter pairs. For example, the default configuration
uses `q` as an alias for the set { ', ", ` }. Modifications with tabular
aliases modify the nearest such pair.

    Old text                    Command         New text ~
    "Nested '*quotes'"          dsq             "Nested quotes"
    "Nes*ted 'quotes'"          dsq             Nested 'quotes'
    "Nes*ted 'quotes'"          csqb            (Nested 'quotes')

Note: Tabular aliases cannot be used to add surrounding pairs, e.g. `ysa)q` is
invalid, since it's ambiguous which pair should be added.

--------------------------------------------------------------------------------
2.7. Jumps                                               *nvim-surround.jumps*

If the cursor is not located inside a surrounding pair, it can jump to the
"nearest" pair. When jumping, |nvim-surround| always prefers
* pairs that surround the cursor, before
* pairs that occur after the cursor, before
* pairs that occur before the cursor.

    Old text                    Command         New text ~
    "hello"* 'world'            dsq             "hello" world
    "hello" world*              csqB            {hello} world
    *some "'nested' quotes"     dsq             some 'nested' quotes
    "'nested' quotes" t*ext     dsq             'nested' quotes text

Note: |nvim-surround| jumps across lines to find the next/previous surrounding
pair, except for quote characters. This is done to match existing behavior for
the `a"` text-object.

================================================================================
3. Configuration                                 *nvim-surround.configuration*

To configure this plugin, call `require("nvim-surround").setup()` or
`require("nvim-surround").buffer_setup()`. The former configures "global"
options that are present in every buffer, while the latter configures
buffer-local options that override the global options. This is particularly
useful for setting up language-specific surrounds, i.e. by calling
`require("nvim-surround").buffer_setup()` in a `ftplugin/` file.

The setup functions are strictly additive, so only the keys that are to be
modified need to be provided. However, to disable any default behavior, the
corresponding value needs to explicitly be set to `false`.

Both functions take a table as an argument, full of configuration options.
>
    require("nvim-surround").setup({
        keymaps =           -- Defines plugin keymaps,
        delimiters =        -- Defines delimiter keys and behavior,
        aliases =           -- Defines aliases,
        highlight_motion =  -- Defines highlight behavior,
        move_cursor =       -- Defines cursor behavior,
    })
<
--------------------------------------------------------------------------------
3.1. keymaps                                           *nvim-surround.keymaps*

The `keymaps` table defines the keymaps used to perform surround actions. The
general rule is that if the key ends in "_line", the delimiter pair is added
on new lines. If the key ends in "_cur", the surround is performed around the
current line.

The default configuration is as follows:
>
    keymaps = {
        insert = "<C-g>s",
        insert_line = "<C-g>S",
        normal = "ys",
        normal_cur = "yss",
        normal_line = "yS",
        normal_cur_line = "ySS",
        visual = "S",
        visual_line = "gS",
        delete = "ds",
        change = "cs",
    },
<
--------------------------------------------------------------------------------
3.2. delimiters                                     *nvim-surround.delimiters*

First, a few notes about |nvim-surround|:
* Multi-line strings  tables of strings, where
  each element of the table is a line of the multi-line string.
* D



The `delimiters` table associates character keys with "delimiter tables", each
of which contain the following keys:

    add:~
        A function that returns the delimiter pair to be added to the buffer.
        For example, consider the function for adding parentheses:
>
        [")"] = {
            add = function()
                return { { "(" }, { ")" } }
            end,
        }
<
        The function must return a pair of lists of strings. Anything can be
        called in the functions; consider the default for `f`:
>
        local config = require("nvim-surround.config")
        add = function()
            local result = config.get_input("Enter the function name: ")
            if result then
                return { { result .. "(" }, { ")" } }
            end
        end,
<
        The user is queried for the function name, and that is used to create
        the surrounding pair at runtime. For "static" surrounds that are not
        evaluated at runtime, the function can be omitted and the `add` key
        can directly take on the value of the delimiter pair. Furthermore,
        tables with just one string can be replaced by the string itself. For
        example, the following configuration also adds parentheses:
>
        [")"] = {
            add = { "(", ")" },
        }
<
--------------------------------------------------------------------------------

                                                       *nvim-surround.setup()*
nvim-surround.setup({opts})
    Setup function to be run by the user, which configures default keymaps and
    delimiter types across all buffers.

    Note: Calling the setup function with no arguments or an empty table uses
    the defaults.

    Note: To disable any unwanted feature, set the corresponding value in the
    setup table to false.

    Usage:
>
    require("nvim-surround").setup({
        keymaps = {
            -- Overwrite keymaps here
        },
        delimiters = {
            -- Customize builtin delimiter types here
        },
        highlight_motion = {
            -- Customize highlight properties here
        },
        -- Other options here...
    })
<


    Valid keys for {opts}

                                                       *nvim-surround.keymaps*
    keymaps:~
        Defines what keymaps are used to interact with the plugin.

        There are three main types of surround "actions": add, delete, and
        change.


        Keys with the suffix `_cur` are a special case where the mapping
        applies to the current line, and keys with the suffix `_line` add the
        delimiters to a new line.

        The type of visual surround also affects behavior:
        * |charwise-visual|: Adds one pair of delimiters around the whole
          visual selection.
        * |linewise-visual|: Adds one pair of delimiters around the whole
          visual selection, each delimiter on a new line.
        * |blockwise-visual|: Adds one pair of delimiters per line, for each
          line in the block.

        Default: {
            insert = "<C-g>s",
            insert_line = "<C-g>S",
            normal = "ys",
            normal_cur = "yss",
            normal_line = "yS",
            normal_cur_line = "ySS",
            visual = "S",
            visual_line = "gS",
            delete = "ds",
            change = "cs",
        }

                                                    *nvim-surround.delimiters*
    delimiters:~
        A table of various types of delimiters that are available to the user.

        All keys should be exactly one character, and unique. Each value is
        either a pair of strings, representing the left and right surrounding
        pair, or a function returning a pair of strings.

        Note: Multi-line strings are represented by a table of strings, with
        each string representing a new line.

        Valid keys for {opts.delimiters}

                               *nvim-surround.delimiters.invalid_key_behavior*
        invalid_key_behavior:~
            A function with parameter {char} that describes how to handle
            cases when an invalid character is used to retrieve a delimiter
            pair. It optionally returns the delimiter pair to be used.

            Default:
>
            function()
                vim.api.nvim_err_writeln(
                    'Error: Invalid character! Configure this message in ' ..
                    'require("nvim-surround").setup()'
                )
            end
<
                                              *nvim-surround.delimiters.pairs*
        pairs:~
            A table that associates characters with a pair of distinct
            delimiters, used for adding/changing/deleting. Each delimiter can
            either be a simple string, or a table containing strings, where
            each element of the table will be put on its own line.

            More powerful pairs can be created using an anonymous function
            that returns a table of two delimiters. This can be used to query
            the user for input and use the input to create the pair, or to tap
            into any other Lua functions. This function can also optionally
            take a parameter {args}, which is a table containing the following
            keys:

        Valid keys for {args}

            bufnr:~
                The buffer number where the surround is called.
            selection:~
                A table containing {first_pos} and {last_pos}, which contain
                the row, column pair for the beginning and end of the
                selection.
            text:~
                A table of strings containing the contents of the selection,
                with one string per line of the buffer.

            In the default configuration, the `i` mapping queries the user for
            both left and right delimiters, while the `f` mapping surrounds
            the selection with parentheses and prepends a user-given function
            name.

            Note: The built-in function `vim.fn.input()` does not handle
            keyboard interrupts, so a protected call is used by default to
            allow input cancellation via <C-c>:
>
            local get_input = function(prompt)
                local ok, result = pcall(vim.fn.input, { prompt = prompt })
                if not ok then
                    return nil
                end
                return result
            end
<
            Default: {
                ["("] = { "( ", " )" },
                [")"] = { "(", ")" },
                ["{"] = { "{ ", " }" },
                ["}"] = { "{", "}" },
                ["<"] = { "< ", " >" },
                [">"] = { "<", ">" },
                ["["] = { "[ ", " ]" },
                ["]"] = { "[", "]" },
                ["i"] = function()
                    local left_delimiter = get_input("Enter the left delimiter: ")
                    if left_delimiter then
                        local right_delimiter = get_input("Enter the right delimiter: ")
                        if right_delimiter then
                            return { left_delimiter, right_delimiter }
                        end
                    end
                end,
                ["f"] = function()
                    local result = get_input("Enter the function name: ")
                    if result then
                        return { result .. "(", ")" }
                    end
                end,
            }

                                         *nvim-surround.delimiters.separators*
        separators:~
            A table that associates characters with a pair of non-distinct
            delimiters, used for adding/changing/deleting.

            Default: {
                ["'"] = { "'", "'" },
                ['"'] = { '"', '"' },
                ["`"] = { "`", "`" },
            }

                                               *nvim-surround.delimiters.HTML*
        HTML:~
            A table of characters used to trigger HTML-style mappings. The
            value of each mapping determines whether the character is used to
            change just the type of the tag, or the whole tag contents.

            Default: {
                ["t"] = "type",
                ["T"] = "whole",
            }

                                            *nvim-surround.delimiters.aliases*
        aliases:~
            A table that aliases some characters to other values:
            * If the value is a single character, then the characters are
              interchangeable.
            * If the value is a table, then the alias may stand in for any of
              the characters in the table when changing/deleting.

            For example, `dsq` deletes the "closest" pair between `ds'`,
            `ds"`, and `ds``. When typed at position 1, the double quotes `"`
            get deleted, and when typed at position 2, the single quotes `'`
            get deleted.
>
            Cursor:                      2             1
            Buffer: vim.fn.execute("echo 'Hello world!'")
<
            For more information on what constitutes as "closest", see
            |nvim-surround.jump|.

            Note: Only builtin text-objects may be insert surrounded, but this
            can be circumvented by defining the following operator-mode maps:
>
            vim.keymap.set("o", "ir", "i[")
            vim.keymap.set("o", "ar", "a[")
            vim.keymap.set("o", "ia", "i<")
            vim.keymap.set("o", "aa", "a<")
<
            Default: {
                ["a"] = ">",
                ["b"] = ")",
                ["B"] = "}",
                ["r"] = "]",
                ["q"] = { '"', "'", "`" },
                ["s"] = { ")", "]", "}", ">", "'", '"', "`" },
            }

                                              *nvim-surround.highlight_motion*
    When adding/changing a surrounding pair, one may optionally highlight the
    selection(s) of interest. During insertion, the selection around which the
    pair will be added is highlighted. During changing, the surrounding pair
    to be replaced is highlighted.

    The relevant highlight group is "NvimSurroundHighlightTextObject", which
    can be configured separately.

    Default: `highlight default link NvimSurroundHighlightTextObject Visual`

    duration:~
        A positive value that represents how long to highlight the
        selection(s) before clearing (in milliseconds).

        Note: A value of 0 means that the highlight has no timeout, persisting
        until either the action is canceled or completed.

        Default: 0

                                                   *nvim-surround.move_cursor*
    When adding/changing/deleting surrounds, one may choose to move the cursor
    to the beginning of the surround, or keep it stationary. A value of
    `false` means that the cursor will not move, while a value of "begin"
    means that the cursor will "jump" to the beginning of the surround.

    For example, consider:
>
    Buffer: This statement "should not" have quotes.
    Cursor:      1         2               3
<
    If `move_cursor` is set to "begin", then typing `dsq` from either position
    1 or 3 will result in the cursor "jumping" to location 2.

    If `move_cursor` is set to `false` then typing `dsq` from either position
    1 or 3 will not move the cursor. Note that position 3 now refers to the
    "q" in "quotes", since two characters before the cursor have been removed.

    Default: "begin"

                                                *nvim-surround.buffer_setup()*
nvim-surround.buffer_setup({opts})
    Sets up user configuration options for the current buffer. It allows users
    to have different mappings per buffer (notably, file type).

    One example is to set up different `f` mappings for Python and Lua file
    types via:
>
    local get_input = function(prompt)
        local ok, result = pcall(vim.fn.input, { prompt = prompt })
        if not ok then
            return nil
        end
        return result
    end

    -- ftplugin/python.lua
    require("nvim-surround").buffer_setup({
        delimiters = {
            pairs = {
                ["f"] = function()
                    return {
                        "def " .. get_input(
                            "Enter the function name: "
                        ) .. "(",
                        "):"
                    }
                end,
            }
        }
    })
    -- ftplugin/lua.lua
    require("nvim-surround").buffer_setup({
        delimiters = {
            pairs = {
                ["f"] = function()
                    return {
                        "function " .. get_input(
                            "Enter the function name: "
                        ) .. "(",
                        ")"
                    }
                end,
            }
        }
    })
<
                                                      *nvim-surround.behavior*
                                                          *nvim-surround.jump*

Under certain circumstances, |nvim-surround| can "jump" to the "nearest"
delimiter. It always prefers
* pairs that surround the cursor, before
* pairs that occur after the cursor, before
* pairs that occur before the cursor.

Note: Reverse jumping is only available for changing/deleting surrounds, not
adding a new pair.

An example of this behavior is as follows:
>
    local nil_value = function()
        vim.ui.input({
            prompt = "Enter some text: ",
        }, function(input)
        end)
    end
<
When the cursor is put on top of the `v` in `vim`, and `ds(..` is typed:
* The parentheses for the `vim.ui.input` call get deleted first
* The parentheses around the word `input` get deleted next
* The parentheses on the first line get deleted last

Note: |nvim-surround| only jumps to separators (quotes by default) on the same
line as the cursor

Here's another example for quotes:
>
    Buffer: local str = "This 'string' contains `some` quotes" -- comment
    Cursor:       1      2    3   4     5       6    7     8       9
<
In the above example, typing `dsq` at locations:
* 1, 2, 5, 8, 9: Deletes the double quotes `"`
* 3, 4: Deletes the single quotes `'`
* 6, 7: Deletes the backticks ```

vim:tw=78:ts=8:ft=help:norl:conceallevel=0:
